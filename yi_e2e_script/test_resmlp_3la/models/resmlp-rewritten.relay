#[version = "0.0.5"]
def @main(%input_0: Tensor[(1, 3, 32, 32), float32], %v1_weight: Tensor[(384, 768), float32], %v1_bias: Tensor[(384), float32], %v2_0_affine_g: Tensor[(1, 1, 384), float32], %v2_0_affine_b: Tensor[(1, 1, 384), float32], %v2_0_fn_weight: Tensor[(4, 4, 1), float32], %v2_0_fn_bias: Tensor[(4), float32], %v2_0_scale: Tensor[(1, 1, 384), float32], %v2_1_affine_g: Tensor[(1, 1, 384), float32], %v2_1_affine_b: Tensor[(1, 1, 384), float32], %v2_1_fn_0_weight: Tensor[(1536, 384), float32], %v2_1_fn_0_bias: Tensor[(1536), float32], %v2_1_fn_2_weight: Tensor[(384, 1536), float32], %v2_1_fn_2_bias: Tensor[(384), float32], %v2_1_scale: Tensor[(1, 1, 384), float32], %v3_0_affine_g: Tensor[(1, 1, 384), float32], %v3_0_affine_b: Tensor[(1, 1, 384), float32], %v3_0_fn_weight: Tensor[(4, 4, 1), float32], %v3_0_fn_bias: Tensor[(4), float32], %v3_0_scale: Tensor[(1, 1, 384), float32], %v3_1_affine_g: Tensor[(1, 1, 384), float32], %v3_1_affine_b: Tensor[(1, 1, 384), float32], %v3_1_fn_0_weight: Tensor[(1536, 384), float32], %v3_1_fn_0_bias: Tensor[(1536), float32], %v3_1_fn_2_weight: Tensor[(384, 1536), float32], %v3_1_fn_2_bias: Tensor[(384), float32], %v3_1_scale: Tensor[(1, 1, 384), float32], %v4_0_affine_g: Tensor[(1, 1, 384), float32], %v4_0_affine_b: Tensor[(1, 1, 384), float32], %v4_0_fn_weight: Tensor[(4, 4, 1), float32], %v4_0_fn_bias: Tensor[(4), float32], %v4_0_scale: Tensor[(1, 1, 384), float32], %v4_1_affine_g: Tensor[(1, 1, 384), float32], %v4_1_affine_b: Tensor[(1, 1, 384), float32], %v4_1_fn_0_weight: Tensor[(1536, 384), float32], %v4_1_fn_0_bias: Tensor[(1536), float32], %v4_1_fn_2_weight: Tensor[(384, 1536), float32], %v4_1_fn_2_bias: Tensor[(384), float32], %v4_1_scale: Tensor[(1, 1, 384), float32], %v5_0_affine_g: Tensor[(1, 1, 384), float32], %v5_0_affine_b: Tensor[(1, 1, 384), float32], %v5_0_fn_weight: Tensor[(4, 4, 1), float32], %v5_0_fn_bias: Tensor[(4), float32], %v5_0_scale: Tensor[(1, 1, 384), float32], %v5_1_affine_g: Tensor[(1, 1, 384), float32], %v5_1_affine_b: Tensor[(1, 1, 384), float32], %v5_1_fn_0_weight: Tensor[(1536, 384), float32], %v5_1_fn_0_bias: Tensor[(1536), float32], %v5_1_fn_2_weight: Tensor[(384, 1536), float32], %v5_1_fn_2_bias: Tensor[(384), float32], %v5_1_scale: Tensor[(1, 1, 384), float32], %v6_0_affine_g: Tensor[(1, 1, 384), float32], %v6_0_affine_b: Tensor[(1, 1, 384), float32], %v6_0_fn_weight: Tensor[(4, 4, 1), float32], %v6_0_fn_bias: Tensor[(4), float32], %v6_0_scale: Tensor[(1, 1, 384), float32], %v6_1_affine_g: Tensor[(1, 1, 384), float32], %v6_1_affine_b: Tensor[(1, 1, 384), float32], %v6_1_fn_0_weight: Tensor[(1536, 384), float32], %v6_1_fn_0_bias: Tensor[(1536), float32], %v6_1_fn_2_weight: Tensor[(384, 1536), float32], %v6_1_fn_2_bias: Tensor[(384), float32], %v6_1_scale: Tensor[(1, 1, 384), float32], %v7_0_affine_g: Tensor[(1, 1, 384), float32], %v7_0_affine_b: Tensor[(1, 1, 384), float32], %v7_0_fn_weight: Tensor[(4, 4, 1), float32], %v7_0_fn_bias: Tensor[(4), float32], %v7_0_scale: Tensor[(1, 1, 384), float32], %v7_1_affine_g: Tensor[(1, 1, 384), float32], %v7_1_affine_b: Tensor[(1, 1, 384), float32], %v7_1_fn_0_weight: Tensor[(1536, 384), float32], %v7_1_fn_0_bias: Tensor[(1536), float32], %v7_1_fn_2_weight: Tensor[(384, 1536), float32], %v7_1_fn_2_bias: Tensor[(384), float32], %v7_1_scale: Tensor[(1, 1, 384), float32], %v8_0_affine_g: Tensor[(1, 1, 384), float32], %v8_0_affine_b: Tensor[(1, 1, 384), float32], %v8_0_fn_weight: Tensor[(4, 4, 1), float32], %v8_0_fn_bias: Tensor[(4), float32], %v8_0_scale: Tensor[(1, 1, 384), float32], %v8_1_affine_g: Tensor[(1, 1, 384), float32], %v8_1_affine_b: Tensor[(1, 1, 384), float32], %v8_1_fn_0_weight: Tensor[(1536, 384), float32], %v8_1_fn_0_bias: Tensor[(1536), float32], %v8_1_fn_2_weight: Tensor[(384, 1536), float32], %v8_1_fn_2_bias: Tensor[(384), float32], %v8_1_scale: Tensor[(1, 1, 384), float32], %v9_0_affine_g: Tensor[(1, 1, 384), float32], %v9_0_affine_b: Tensor[(1, 1, 384), float32], %v9_0_fn_weight: Tensor[(4, 4, 1), float32], %v9_0_fn_bias: Tensor[(4), float32], %v9_0_scale: Tensor[(1, 1, 384), float32], %v9_1_affine_g: Tensor[(1, 1, 384), float32], %v9_1_affine_b: Tensor[(1, 1, 384), float32], %v9_1_fn_0_weight: Tensor[(1536, 384), float32], %v9_1_fn_0_bias: Tensor[(1536), float32], %v9_1_fn_2_weight: Tensor[(384, 1536), float32], %v9_1_fn_2_bias: Tensor[(384), float32], %v9_1_scale: Tensor[(1, 1, 384), float32], %v10_0_affine_g: Tensor[(1, 1, 384), float32], %v10_0_affine_b: Tensor[(1, 1, 384), float32], %v10_0_fn_weight: Tensor[(4, 4, 1), float32], %v10_0_fn_bias: Tensor[(4), float32], %v10_0_scale: Tensor[(1, 1, 384), float32], %v10_1_affine_g: Tensor[(1, 1, 384), float32], %v10_1_affine_b: Tensor[(1, 1, 384), float32], %v10_1_fn_0_weight: Tensor[(1536, 384), float32], %v10_1_fn_0_bias: Tensor[(1536), float32], %v10_1_fn_2_weight: Tensor[(384, 1536), float32], %v10_1_fn_2_bias: Tensor[(384), float32], %v10_1_scale: Tensor[(1, 1, 384), float32], %v11_0_affine_g: Tensor[(1, 1, 384), float32], %v11_0_affine_b: Tensor[(1, 1, 384), float32], %v11_0_fn_weight: Tensor[(4, 4, 1), float32], %v11_0_fn_bias: Tensor[(4), float32], %v11_0_scale: Tensor[(1, 1, 384), float32], %v11_1_affine_g: Tensor[(1, 1, 384), float32], %v11_1_affine_b: Tensor[(1, 1, 384), float32], %v11_1_fn_0_weight: Tensor[(1536, 384), float32], %v11_1_fn_0_bias: Tensor[(1536), float32], %v11_1_fn_2_weight: Tensor[(384, 1536), float32], %v11_1_fn_2_bias: Tensor[(384), float32], %v11_1_scale: Tensor[(1, 1, 384), float32], %v12_0_affine_g: Tensor[(1, 1, 384), float32], %v12_0_affine_b: Tensor[(1, 1, 384), float32], %v12_0_fn_weight: Tensor[(4, 4, 1), float32], %v12_0_fn_bias: Tensor[(4), float32], %v12_0_scale: Tensor[(1, 1, 384), float32], %v12_1_affine_g: Tensor[(1, 1, 384), float32], %v12_1_affine_b: Tensor[(1, 1, 384), float32], %v12_1_fn_0_weight: Tensor[(1536, 384), float32], %v12_1_fn_0_bias: Tensor[(1536), float32], %v12_1_fn_2_weight: Tensor[(384, 1536), float32], %v12_1_fn_2_bias: Tensor[(384), float32], %v12_1_scale: Tensor[(1, 1, 384), float32], %v13_0_affine_g: Tensor[(1, 1, 384), float32], %v13_0_affine_b: Tensor[(1, 1, 384), float32], %v13_0_fn_weight: Tensor[(4, 4, 1), float32], %v13_0_fn_bias: Tensor[(4), float32], %v13_0_scale: Tensor[(1, 1, 384), float32], %v13_1_affine_g: Tensor[(1, 1, 384), float32], %v13_1_affine_b: Tensor[(1, 1, 384), float32], %v13_1_fn_0_weight: Tensor[(1536, 384), float32], %v13_1_fn_0_bias: Tensor[(1536), float32], %v13_1_fn_2_weight: Tensor[(384, 1536), float32], %v13_1_fn_2_bias: Tensor[(384), float32], %v13_1_scale: Tensor[(1, 1, 384), float32], %v14_g: Tensor[(1, 1, 384), float32], %v14_b: Tensor[(1, 1, 384), float32], %v16_weight: Tensor[(10, 384), float32], %v16_bias: Tensor[(10), float32]) -> Tensor[(1, 10), float32] {
  let %var_2: Tensor[(1, 3, 2, 16, 2, 16), float32] = reshape(%input_0, newshape=[1, 3, 2, 16, 2, 16]) /* ty=Tensor[(1, 3, 2, 16, 2, 16), float32] */;
  let %var_3: Tensor[(1, 2, 2, 16, 16, 3), float32] = transpose(%var_2, axes=[0, 2, 4, 3, 5, 1]) /* ty=Tensor[(1, 2, 2, 16, 16, 3), float32] */;
  let %var_4: Tensor[(1, 4, 768), float32] = reshape(%var_3, newshape=[1, 4, 768]) /* ty=Tensor[(1, 4, 768), float32] */;
  let %var_6: Tensor[(768, 384), float32] = transpose(%v1_weight, axes=[1, 0]) /* ty=Tensor[(768, 384), float32] */;
  let %var_8: Tensor[(4, 768), float32] = reshape(%var_4, newshape=[4, 768]) /* ty=Tensor[(4, 768), float32] */;
  let %var_9: Tensor[(384, 768), float32] = transpose(%var_6, axes=[1, 0]) /* ty=Tensor[(384, 768), float32] */;
  %1 = fn (%outer_arg_0: Tensor[(4, 768), float32], %outer_arg_1: Tensor[(384, 768), float32], %outer_arg_2: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_0") -> Tensor[(4, 384), float32] {
    %0 = fn (%inner_arg_0: Tensor[(4, 768), float32], %inner_arg_1: Tensor[(384, 768), float32], %inner_arg_2: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][0]) /* ty=Tensor[(4, 384), float32] */
    };
    %0(%outer_arg_0, %outer_arg_1, %outer_arg_2) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_10: Tensor[(4, 384), float32] = %1(%var_8, %var_9, %v1_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_12: Tensor[(1, 4, 384), float32] = reshape(%var_10, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_14: Tensor[(1, 4, 384), float32] = multiply(%var_12, %v2_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_16: Tensor[(1, 4, 384), float32] = add(%var_14, %v2_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_18: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_16, %v2_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_20: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_18, %v2_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_21: Tensor[(1, 4, 384), float32] = multiply(%var_20, %v2_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_23: Tensor[(1, 4, 384), float32] = add(%var_21, %var_12) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_25: Tensor[(1, 4, 384), float32] = multiply(%var_23, %v2_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_26: Tensor[(1, 4, 384), float32] = add(%var_25, %v2_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_28: Tensor[(384, 1536), float32] = transpose(%v2_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_30: Tensor[(4, 384), float32] = reshape(%var_26, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_31: Tensor[(1536, 384), float32] = transpose(%var_28, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %3 = fn (%outer_arg_01: Tensor[(4, 384), float32], %outer_arg_11: Tensor[(1536, 384), float32], %outer_arg_21: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_1") -> Tensor[(4, 1536), float32] {
    %2 = fn (%inner_arg_01: Tensor[(4, 384), float32], %inner_arg_11: Tensor[(1536, 384), float32], %inner_arg_21: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][1]) /* ty=Tensor[(4, 1536), float32] */
    };
    %2(%outer_arg_01, %outer_arg_11, %outer_arg_21) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_32: Tensor[(4, 1536), float32] = %3(%var_30, %var_31, %v2_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_33: Tensor[(1, 4, 1536), float32] = reshape(%var_32, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_34: Tensor[(1, 4, 1536), float32] = multiply(%var_33, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_35: Tensor[(1, 4, 1536), float32] = erf(%var_34) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_36: Tensor[(1, 4, 1536), float32] = multiply(%var_35, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_37: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_36) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_38: Tensor[(1, 4, 1536), float32] = multiply(%var_33, %var_37) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_40: Tensor[(1536, 384), float32] = transpose(%v2_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_42: Tensor[(4, 1536), float32] = reshape(%var_38, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_43: Tensor[(384, 1536), float32] = transpose(%var_40, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %5 = fn (%outer_arg_02: Tensor[(4, 1536), float32], %outer_arg_12: Tensor[(384, 1536), float32], %outer_arg_22: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_2") -> Tensor[(4, 384), float32] {
    %4 = fn (%inner_arg_02: Tensor[(4, 1536), float32], %inner_arg_12: Tensor[(384, 1536), float32], %inner_arg_22: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][2]) /* ty=Tensor[(4, 384), float32] */
    };
    %4(%outer_arg_02, %outer_arg_12, %outer_arg_22) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_44: Tensor[(4, 384), float32] = %5(%var_42, %var_43, %v2_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_46: Tensor[(1, 4, 384), float32] = reshape(%var_44, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_47: Tensor[(1, 4, 384), float32] = multiply(%var_46, %v2_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_49: Tensor[(1, 4, 384), float32] = add(%var_47, %var_23) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_51: Tensor[(1, 4, 384), float32] = multiply(%var_49, %v3_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_53: Tensor[(1, 4, 384), float32] = add(%var_51, %v3_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_55: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_53, %v3_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_57: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_55, %v3_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_58: Tensor[(1, 4, 384), float32] = multiply(%var_57, %v3_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_60: Tensor[(1, 4, 384), float32] = add(%var_58, %var_49) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_62: Tensor[(1, 4, 384), float32] = multiply(%var_60, %v3_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_63: Tensor[(1, 4, 384), float32] = add(%var_62, %v3_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_65: Tensor[(384, 1536), float32] = transpose(%v3_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_67: Tensor[(4, 384), float32] = reshape(%var_63, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_68: Tensor[(1536, 384), float32] = transpose(%var_65, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %7 = fn (%outer_arg_03: Tensor[(4, 384), float32], %outer_arg_13: Tensor[(1536, 384), float32], %outer_arg_23: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_3") -> Tensor[(4, 1536), float32] {
    %6 = fn (%inner_arg_03: Tensor[(4, 384), float32], %inner_arg_13: Tensor[(1536, 384), float32], %inner_arg_23: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][3]) /* ty=Tensor[(4, 1536), float32] */
    };
    %6(%outer_arg_03, %outer_arg_13, %outer_arg_23) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_69: Tensor[(4, 1536), float32] = %7(%var_67, %var_68, %v3_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_70: Tensor[(1, 4, 1536), float32] = reshape(%var_69, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_71: Tensor[(1, 4, 1536), float32] = multiply(%var_70, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_72: Tensor[(1, 4, 1536), float32] = erf(%var_71) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_73: Tensor[(1, 4, 1536), float32] = multiply(%var_72, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_74: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_73) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_75: Tensor[(1, 4, 1536), float32] = multiply(%var_70, %var_74) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_77: Tensor[(1536, 384), float32] = transpose(%v3_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_79: Tensor[(4, 1536), float32] = reshape(%var_75, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_80: Tensor[(384, 1536), float32] = transpose(%var_77, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %9 = fn (%outer_arg_04: Tensor[(4, 1536), float32], %outer_arg_14: Tensor[(384, 1536), float32], %outer_arg_24: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_4") -> Tensor[(4, 384), float32] {
    %8 = fn (%inner_arg_04: Tensor[(4, 1536), float32], %inner_arg_14: Tensor[(384, 1536), float32], %inner_arg_24: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][4]) /* ty=Tensor[(4, 384), float32] */
    };
    %8(%outer_arg_04, %outer_arg_14, %outer_arg_24) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_81: Tensor[(4, 384), float32] = %9(%var_79, %var_80, %v3_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_83: Tensor[(1, 4, 384), float32] = reshape(%var_81, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_84: Tensor[(1, 4, 384), float32] = multiply(%var_83, %v3_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_86: Tensor[(1, 4, 384), float32] = add(%var_84, %var_60) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_88: Tensor[(1, 4, 384), float32] = multiply(%var_86, %v4_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_90: Tensor[(1, 4, 384), float32] = add(%var_88, %v4_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_92: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_90, %v4_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_94: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_92, %v4_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_95: Tensor[(1, 4, 384), float32] = multiply(%var_94, %v4_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_97: Tensor[(1, 4, 384), float32] = add(%var_95, %var_86) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_99: Tensor[(1, 4, 384), float32] = multiply(%var_97, %v4_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_100: Tensor[(1, 4, 384), float32] = add(%var_99, %v4_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_102: Tensor[(384, 1536), float32] = transpose(%v4_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_104: Tensor[(4, 384), float32] = reshape(%var_100, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_105: Tensor[(1536, 384), float32] = transpose(%var_102, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %11 = fn (%outer_arg_05: Tensor[(4, 384), float32], %outer_arg_15: Tensor[(1536, 384), float32], %outer_arg_25: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_5") -> Tensor[(4, 1536), float32] {
    %10 = fn (%inner_arg_05: Tensor[(4, 384), float32], %inner_arg_15: Tensor[(1536, 384), float32], %inner_arg_25: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][5]) /* ty=Tensor[(4, 1536), float32] */
    };
    %10(%outer_arg_05, %outer_arg_15, %outer_arg_25) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_106: Tensor[(4, 1536), float32] = %11(%var_104, %var_105, %v4_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_107: Tensor[(1, 4, 1536), float32] = reshape(%var_106, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_108: Tensor[(1, 4, 1536), float32] = multiply(%var_107, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_109: Tensor[(1, 4, 1536), float32] = erf(%var_108) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_110: Tensor[(1, 4, 1536), float32] = multiply(%var_109, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_111: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_110) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_112: Tensor[(1, 4, 1536), float32] = multiply(%var_107, %var_111) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_114: Tensor[(1536, 384), float32] = transpose(%v4_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_116: Tensor[(4, 1536), float32] = reshape(%var_112, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_117: Tensor[(384, 1536), float32] = transpose(%var_114, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %13 = fn (%outer_arg_06: Tensor[(4, 1536), float32], %outer_arg_16: Tensor[(384, 1536), float32], %outer_arg_26: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_6") -> Tensor[(4, 384), float32] {
    %12 = fn (%inner_arg_06: Tensor[(4, 1536), float32], %inner_arg_16: Tensor[(384, 1536), float32], %inner_arg_26: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][6]) /* ty=Tensor[(4, 384), float32] */
    };
    %12(%outer_arg_06, %outer_arg_16, %outer_arg_26) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_118: Tensor[(4, 384), float32] = %13(%var_116, %var_117, %v4_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_120: Tensor[(1, 4, 384), float32] = reshape(%var_118, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_121: Tensor[(1, 4, 384), float32] = multiply(%var_120, %v4_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_123: Tensor[(1, 4, 384), float32] = add(%var_121, %var_97) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_125: Tensor[(1, 4, 384), float32] = multiply(%var_123, %v5_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_127: Tensor[(1, 4, 384), float32] = add(%var_125, %v5_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_129: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_127, %v5_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_131: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_129, %v5_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_132: Tensor[(1, 4, 384), float32] = multiply(%var_131, %v5_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_134: Tensor[(1, 4, 384), float32] = add(%var_132, %var_123) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_136: Tensor[(1, 4, 384), float32] = multiply(%var_134, %v5_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_137: Tensor[(1, 4, 384), float32] = add(%var_136, %v5_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_139: Tensor[(384, 1536), float32] = transpose(%v5_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_141: Tensor[(4, 384), float32] = reshape(%var_137, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_142: Tensor[(1536, 384), float32] = transpose(%var_139, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %15 = fn (%outer_arg_07: Tensor[(4, 384), float32], %outer_arg_17: Tensor[(1536, 384), float32], %outer_arg_27: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_7") -> Tensor[(4, 1536), float32] {
    %14 = fn (%inner_arg_07: Tensor[(4, 384), float32], %inner_arg_17: Tensor[(1536, 384), float32], %inner_arg_27: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][7]) /* ty=Tensor[(4, 1536), float32] */
    };
    %14(%outer_arg_07, %outer_arg_17, %outer_arg_27) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_143: Tensor[(4, 1536), float32] = %15(%var_141, %var_142, %v5_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_144: Tensor[(1, 4, 1536), float32] = reshape(%var_143, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_145: Tensor[(1, 4, 1536), float32] = multiply(%var_144, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_146: Tensor[(1, 4, 1536), float32] = erf(%var_145) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_147: Tensor[(1, 4, 1536), float32] = multiply(%var_146, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_148: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_147) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_149: Tensor[(1, 4, 1536), float32] = multiply(%var_144, %var_148) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_151: Tensor[(1536, 384), float32] = transpose(%v5_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_153: Tensor[(4, 1536), float32] = reshape(%var_149, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_154: Tensor[(384, 1536), float32] = transpose(%var_151, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %17 = fn (%outer_arg_08: Tensor[(4, 1536), float32], %outer_arg_18: Tensor[(384, 1536), float32], %outer_arg_28: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_8") -> Tensor[(4, 384), float32] {
    %16 = fn (%inner_arg_08: Tensor[(4, 1536), float32], %inner_arg_18: Tensor[(384, 1536), float32], %inner_arg_28: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][8]) /* ty=Tensor[(4, 384), float32] */
    };
    %16(%outer_arg_08, %outer_arg_18, %outer_arg_28) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_155: Tensor[(4, 384), float32] = %17(%var_153, %var_154, %v5_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_157: Tensor[(1, 4, 384), float32] = reshape(%var_155, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_158: Tensor[(1, 4, 384), float32] = multiply(%var_157, %v5_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_160: Tensor[(1, 4, 384), float32] = add(%var_158, %var_134) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_162: Tensor[(1, 4, 384), float32] = multiply(%var_160, %v6_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_164: Tensor[(1, 4, 384), float32] = add(%var_162, %v6_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_166: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_164, %v6_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_168: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_166, %v6_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_169: Tensor[(1, 4, 384), float32] = multiply(%var_168, %v6_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_171: Tensor[(1, 4, 384), float32] = add(%var_169, %var_160) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_173: Tensor[(1, 4, 384), float32] = multiply(%var_171, %v6_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_174: Tensor[(1, 4, 384), float32] = add(%var_173, %v6_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_176: Tensor[(384, 1536), float32] = transpose(%v6_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_178: Tensor[(4, 384), float32] = reshape(%var_174, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_179: Tensor[(1536, 384), float32] = transpose(%var_176, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %19 = fn (%outer_arg_09: Tensor[(4, 384), float32], %outer_arg_19: Tensor[(1536, 384), float32], %outer_arg_29: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_9") -> Tensor[(4, 1536), float32] {
    %18 = fn (%inner_arg_09: Tensor[(4, 384), float32], %inner_arg_19: Tensor[(1536, 384), float32], %inner_arg_29: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][9]) /* ty=Tensor[(4, 1536), float32] */
    };
    %18(%outer_arg_09, %outer_arg_19, %outer_arg_29) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_180: Tensor[(4, 1536), float32] = %19(%var_178, %var_179, %v6_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_181: Tensor[(1, 4, 1536), float32] = reshape(%var_180, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_182: Tensor[(1, 4, 1536), float32] = multiply(%var_181, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_183: Tensor[(1, 4, 1536), float32] = erf(%var_182) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_184: Tensor[(1, 4, 1536), float32] = multiply(%var_183, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_185: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_184) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_186: Tensor[(1, 4, 1536), float32] = multiply(%var_181, %var_185) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_188: Tensor[(1536, 384), float32] = transpose(%v6_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_190: Tensor[(4, 1536), float32] = reshape(%var_186, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_191: Tensor[(384, 1536), float32] = transpose(%var_188, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %21 = fn (%outer_arg_010: Tensor[(4, 1536), float32], %outer_arg_110: Tensor[(384, 1536), float32], %outer_arg_210: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_10") -> Tensor[(4, 384), float32] {
    %20 = fn (%inner_arg_010: Tensor[(4, 1536), float32], %inner_arg_110: Tensor[(384, 1536), float32], %inner_arg_210: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][10]) /* ty=Tensor[(4, 384), float32] */
    };
    %20(%outer_arg_010, %outer_arg_110, %outer_arg_210) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_192: Tensor[(4, 384), float32] = %21(%var_190, %var_191, %v6_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_194: Tensor[(1, 4, 384), float32] = reshape(%var_192, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_195: Tensor[(1, 4, 384), float32] = multiply(%var_194, %v6_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_197: Tensor[(1, 4, 384), float32] = add(%var_195, %var_171) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_199: Tensor[(1, 4, 384), float32] = multiply(%var_197, %v7_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_201: Tensor[(1, 4, 384), float32] = add(%var_199, %v7_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_203: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_201, %v7_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_205: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_203, %v7_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_206: Tensor[(1, 4, 384), float32] = multiply(%var_205, %v7_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_208: Tensor[(1, 4, 384), float32] = add(%var_206, %var_197) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_210: Tensor[(1, 4, 384), float32] = multiply(%var_208, %v7_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_211: Tensor[(1, 4, 384), float32] = add(%var_210, %v7_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_213: Tensor[(384, 1536), float32] = transpose(%v7_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_215: Tensor[(4, 384), float32] = reshape(%var_211, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_216: Tensor[(1536, 384), float32] = transpose(%var_213, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %23 = fn (%outer_arg_011: Tensor[(4, 384), float32], %outer_arg_111: Tensor[(1536, 384), float32], %outer_arg_211: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_11") -> Tensor[(4, 1536), float32] {
    %22 = fn (%inner_arg_011: Tensor[(4, 384), float32], %inner_arg_111: Tensor[(1536, 384), float32], %inner_arg_211: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][11]) /* ty=Tensor[(4, 1536), float32] */
    };
    %22(%outer_arg_011, %outer_arg_111, %outer_arg_211) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_217: Tensor[(4, 1536), float32] = %23(%var_215, %var_216, %v7_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_218: Tensor[(1, 4, 1536), float32] = reshape(%var_217, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_219: Tensor[(1, 4, 1536), float32] = multiply(%var_218, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_220: Tensor[(1, 4, 1536), float32] = erf(%var_219) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_221: Tensor[(1, 4, 1536), float32] = multiply(%var_220, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_222: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_221) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_223: Tensor[(1, 4, 1536), float32] = multiply(%var_218, %var_222) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_225: Tensor[(1536, 384), float32] = transpose(%v7_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_227: Tensor[(4, 1536), float32] = reshape(%var_223, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_228: Tensor[(384, 1536), float32] = transpose(%var_225, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %25 = fn (%outer_arg_012: Tensor[(4, 1536), float32], %outer_arg_112: Tensor[(384, 1536), float32], %outer_arg_212: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_12") -> Tensor[(4, 384), float32] {
    %24 = fn (%inner_arg_012: Tensor[(4, 1536), float32], %inner_arg_112: Tensor[(384, 1536), float32], %inner_arg_212: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][12]) /* ty=Tensor[(4, 384), float32] */
    };
    %24(%outer_arg_012, %outer_arg_112, %outer_arg_212) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_229: Tensor[(4, 384), float32] = %25(%var_227, %var_228, %v7_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_231: Tensor[(1, 4, 384), float32] = reshape(%var_229, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_232: Tensor[(1, 4, 384), float32] = multiply(%var_231, %v7_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_234: Tensor[(1, 4, 384), float32] = add(%var_232, %var_208) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_236: Tensor[(1, 4, 384), float32] = multiply(%var_234, %v8_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_238: Tensor[(1, 4, 384), float32] = add(%var_236, %v8_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_240: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_238, %v8_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_242: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_240, %v8_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_243: Tensor[(1, 4, 384), float32] = multiply(%var_242, %v8_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_245: Tensor[(1, 4, 384), float32] = add(%var_243, %var_234) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_247: Tensor[(1, 4, 384), float32] = multiply(%var_245, %v8_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_248: Tensor[(1, 4, 384), float32] = add(%var_247, %v8_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_250: Tensor[(384, 1536), float32] = transpose(%v8_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_252: Tensor[(4, 384), float32] = reshape(%var_248, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_253: Tensor[(1536, 384), float32] = transpose(%var_250, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %27 = fn (%outer_arg_013: Tensor[(4, 384), float32], %outer_arg_113: Tensor[(1536, 384), float32], %outer_arg_213: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_13") -> Tensor[(4, 1536), float32] {
    %26 = fn (%inner_arg_013: Tensor[(4, 384), float32], %inner_arg_113: Tensor[(1536, 384), float32], %inner_arg_213: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][13]) /* ty=Tensor[(4, 1536), float32] */
    };
    %26(%outer_arg_013, %outer_arg_113, %outer_arg_213) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_254: Tensor[(4, 1536), float32] = %27(%var_252, %var_253, %v8_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_255: Tensor[(1, 4, 1536), float32] = reshape(%var_254, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_256: Tensor[(1, 4, 1536), float32] = multiply(%var_255, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_257: Tensor[(1, 4, 1536), float32] = erf(%var_256) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_258: Tensor[(1, 4, 1536), float32] = multiply(%var_257, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_259: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_258) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_260: Tensor[(1, 4, 1536), float32] = multiply(%var_255, %var_259) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_262: Tensor[(1536, 384), float32] = transpose(%v8_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_264: Tensor[(4, 1536), float32] = reshape(%var_260, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_265: Tensor[(384, 1536), float32] = transpose(%var_262, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %29 = fn (%outer_arg_014: Tensor[(4, 1536), float32], %outer_arg_114: Tensor[(384, 1536), float32], %outer_arg_214: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_14") -> Tensor[(4, 384), float32] {
    %28 = fn (%inner_arg_014: Tensor[(4, 1536), float32], %inner_arg_114: Tensor[(384, 1536), float32], %inner_arg_214: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][14]) /* ty=Tensor[(4, 384), float32] */
    };
    %28(%outer_arg_014, %outer_arg_114, %outer_arg_214) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_266: Tensor[(4, 384), float32] = %29(%var_264, %var_265, %v8_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_268: Tensor[(1, 4, 384), float32] = reshape(%var_266, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_269: Tensor[(1, 4, 384), float32] = multiply(%var_268, %v8_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_271: Tensor[(1, 4, 384), float32] = add(%var_269, %var_245) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_273: Tensor[(1, 4, 384), float32] = multiply(%var_271, %v9_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_275: Tensor[(1, 4, 384), float32] = add(%var_273, %v9_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_277: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_275, %v9_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_279: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_277, %v9_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_280: Tensor[(1, 4, 384), float32] = multiply(%var_279, %v9_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_282: Tensor[(1, 4, 384), float32] = add(%var_280, %var_271) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_284: Tensor[(1, 4, 384), float32] = multiply(%var_282, %v9_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_285: Tensor[(1, 4, 384), float32] = add(%var_284, %v9_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_287: Tensor[(384, 1536), float32] = transpose(%v9_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_289: Tensor[(4, 384), float32] = reshape(%var_285, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_290: Tensor[(1536, 384), float32] = transpose(%var_287, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %31 = fn (%outer_arg_015: Tensor[(4, 384), float32], %outer_arg_115: Tensor[(1536, 384), float32], %outer_arg_215: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_15") -> Tensor[(4, 1536), float32] {
    %30 = fn (%inner_arg_015: Tensor[(4, 384), float32], %inner_arg_115: Tensor[(1536, 384), float32], %inner_arg_215: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][15]) /* ty=Tensor[(4, 1536), float32] */
    };
    %30(%outer_arg_015, %outer_arg_115, %outer_arg_215) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_291: Tensor[(4, 1536), float32] = %31(%var_289, %var_290, %v9_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_292: Tensor[(1, 4, 1536), float32] = reshape(%var_291, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_293: Tensor[(1, 4, 1536), float32] = multiply(%var_292, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_294: Tensor[(1, 4, 1536), float32] = erf(%var_293) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_295: Tensor[(1, 4, 1536), float32] = multiply(%var_294, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_296: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_295) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_297: Tensor[(1, 4, 1536), float32] = multiply(%var_292, %var_296) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_299: Tensor[(1536, 384), float32] = transpose(%v9_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_301: Tensor[(4, 1536), float32] = reshape(%var_297, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_302: Tensor[(384, 1536), float32] = transpose(%var_299, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %33 = fn (%outer_arg_016: Tensor[(4, 1536), float32], %outer_arg_116: Tensor[(384, 1536), float32], %outer_arg_216: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_16") -> Tensor[(4, 384), float32] {
    %32 = fn (%inner_arg_016: Tensor[(4, 1536), float32], %inner_arg_116: Tensor[(384, 1536), float32], %inner_arg_216: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][16]) /* ty=Tensor[(4, 384), float32] */
    };
    %32(%outer_arg_016, %outer_arg_116, %outer_arg_216) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_303: Tensor[(4, 384), float32] = %33(%var_301, %var_302, %v9_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_305: Tensor[(1, 4, 384), float32] = reshape(%var_303, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_306: Tensor[(1, 4, 384), float32] = multiply(%var_305, %v9_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_308: Tensor[(1, 4, 384), float32] = add(%var_306, %var_282) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_310: Tensor[(1, 4, 384), float32] = multiply(%var_308, %v10_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_312: Tensor[(1, 4, 384), float32] = add(%var_310, %v10_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_314: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_312, %v10_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_316: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_314, %v10_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_317: Tensor[(1, 4, 384), float32] = multiply(%var_316, %v10_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_319: Tensor[(1, 4, 384), float32] = add(%var_317, %var_308) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_321: Tensor[(1, 4, 384), float32] = multiply(%var_319, %v10_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_322: Tensor[(1, 4, 384), float32] = add(%var_321, %v10_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_324: Tensor[(384, 1536), float32] = transpose(%v10_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_326: Tensor[(4, 384), float32] = reshape(%var_322, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_327: Tensor[(1536, 384), float32] = transpose(%var_324, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %35 = fn (%outer_arg_017: Tensor[(4, 384), float32], %outer_arg_117: Tensor[(1536, 384), float32], %outer_arg_217: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_17") -> Tensor[(4, 1536), float32] {
    %34 = fn (%inner_arg_017: Tensor[(4, 384), float32], %inner_arg_117: Tensor[(1536, 384), float32], %inner_arg_217: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][17]) /* ty=Tensor[(4, 1536), float32] */
    };
    %34(%outer_arg_017, %outer_arg_117, %outer_arg_217) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_328: Tensor[(4, 1536), float32] = %35(%var_326, %var_327, %v10_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_329: Tensor[(1, 4, 1536), float32] = reshape(%var_328, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_330: Tensor[(1, 4, 1536), float32] = multiply(%var_329, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_331: Tensor[(1, 4, 1536), float32] = erf(%var_330) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_332: Tensor[(1, 4, 1536), float32] = multiply(%var_331, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_333: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_332) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_334: Tensor[(1, 4, 1536), float32] = multiply(%var_329, %var_333) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_336: Tensor[(1536, 384), float32] = transpose(%v10_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_338: Tensor[(4, 1536), float32] = reshape(%var_334, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_339: Tensor[(384, 1536), float32] = transpose(%var_336, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %37 = fn (%outer_arg_018: Tensor[(4, 1536), float32], %outer_arg_118: Tensor[(384, 1536), float32], %outer_arg_218: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_18") -> Tensor[(4, 384), float32] {
    %36 = fn (%inner_arg_018: Tensor[(4, 1536), float32], %inner_arg_118: Tensor[(384, 1536), float32], %inner_arg_218: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][18]) /* ty=Tensor[(4, 384), float32] */
    };
    %36(%outer_arg_018, %outer_arg_118, %outer_arg_218) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_340: Tensor[(4, 384), float32] = %37(%var_338, %var_339, %v10_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_342: Tensor[(1, 4, 384), float32] = reshape(%var_340, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_343: Tensor[(1, 4, 384), float32] = multiply(%var_342, %v10_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_345: Tensor[(1, 4, 384), float32] = add(%var_343, %var_319) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_347: Tensor[(1, 4, 384), float32] = multiply(%var_345, %v11_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_349: Tensor[(1, 4, 384), float32] = add(%var_347, %v11_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_351: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_349, %v11_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_353: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_351, %v11_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_354: Tensor[(1, 4, 384), float32] = multiply(%var_353, %v11_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_356: Tensor[(1, 4, 384), float32] = add(%var_354, %var_345) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_358: Tensor[(1, 4, 384), float32] = multiply(%var_356, %v11_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_359: Tensor[(1, 4, 384), float32] = add(%var_358, %v11_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_361: Tensor[(384, 1536), float32] = transpose(%v11_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_363: Tensor[(4, 384), float32] = reshape(%var_359, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_364: Tensor[(1536, 384), float32] = transpose(%var_361, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %39 = fn (%outer_arg_019: Tensor[(4, 384), float32], %outer_arg_119: Tensor[(1536, 384), float32], %outer_arg_219: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_19") -> Tensor[(4, 1536), float32] {
    %38 = fn (%inner_arg_019: Tensor[(4, 384), float32], %inner_arg_119: Tensor[(1536, 384), float32], %inner_arg_219: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][19]) /* ty=Tensor[(4, 1536), float32] */
    };
    %38(%outer_arg_019, %outer_arg_119, %outer_arg_219) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_365: Tensor[(4, 1536), float32] = %39(%var_363, %var_364, %v11_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_366: Tensor[(1, 4, 1536), float32] = reshape(%var_365, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_367: Tensor[(1, 4, 1536), float32] = multiply(%var_366, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_368: Tensor[(1, 4, 1536), float32] = erf(%var_367) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_369: Tensor[(1, 4, 1536), float32] = multiply(%var_368, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_370: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_369) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_371: Tensor[(1, 4, 1536), float32] = multiply(%var_366, %var_370) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_373: Tensor[(1536, 384), float32] = transpose(%v11_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_375: Tensor[(4, 1536), float32] = reshape(%var_371, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_376: Tensor[(384, 1536), float32] = transpose(%var_373, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %41 = fn (%outer_arg_020: Tensor[(4, 1536), float32], %outer_arg_120: Tensor[(384, 1536), float32], %outer_arg_220: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_20") -> Tensor[(4, 384), float32] {
    %40 = fn (%inner_arg_020: Tensor[(4, 1536), float32], %inner_arg_120: Tensor[(384, 1536), float32], %inner_arg_220: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][20]) /* ty=Tensor[(4, 384), float32] */
    };
    %40(%outer_arg_020, %outer_arg_120, %outer_arg_220) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_377: Tensor[(4, 384), float32] = %41(%var_375, %var_376, %v11_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_379: Tensor[(1, 4, 384), float32] = reshape(%var_377, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_380: Tensor[(1, 4, 384), float32] = multiply(%var_379, %v11_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_382: Tensor[(1, 4, 384), float32] = add(%var_380, %var_356) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_384: Tensor[(1, 4, 384), float32] = multiply(%var_382, %v12_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_386: Tensor[(1, 4, 384), float32] = add(%var_384, %v12_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_388: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_386, %v12_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_390: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_388, %v12_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_391: Tensor[(1, 4, 384), float32] = multiply(%var_390, %v12_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_393: Tensor[(1, 4, 384), float32] = add(%var_391, %var_382) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_395: Tensor[(1, 4, 384), float32] = multiply(%var_393, %v12_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_396: Tensor[(1, 4, 384), float32] = add(%var_395, %v12_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_398: Tensor[(384, 1536), float32] = transpose(%v12_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_400: Tensor[(4, 384), float32] = reshape(%var_396, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_401: Tensor[(1536, 384), float32] = transpose(%var_398, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %43 = fn (%outer_arg_021: Tensor[(4, 384), float32], %outer_arg_121: Tensor[(1536, 384), float32], %outer_arg_221: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_21") -> Tensor[(4, 1536), float32] {
    %42 = fn (%inner_arg_021: Tensor[(4, 384), float32], %inner_arg_121: Tensor[(1536, 384), float32], %inner_arg_221: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][21]) /* ty=Tensor[(4, 1536), float32] */
    };
    %42(%outer_arg_021, %outer_arg_121, %outer_arg_221) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_402: Tensor[(4, 1536), float32] = %43(%var_400, %var_401, %v12_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_403: Tensor[(1, 4, 1536), float32] = reshape(%var_402, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_404: Tensor[(1, 4, 1536), float32] = multiply(%var_403, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_405: Tensor[(1, 4, 1536), float32] = erf(%var_404) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_406: Tensor[(1, 4, 1536), float32] = multiply(%var_405, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_407: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_406) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_408: Tensor[(1, 4, 1536), float32] = multiply(%var_403, %var_407) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_410: Tensor[(1536, 384), float32] = transpose(%v12_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_412: Tensor[(4, 1536), float32] = reshape(%var_408, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_413: Tensor[(384, 1536), float32] = transpose(%var_410, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %45 = fn (%outer_arg_022: Tensor[(4, 1536), float32], %outer_arg_122: Tensor[(384, 1536), float32], %outer_arg_222: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_22") -> Tensor[(4, 384), float32] {
    %44 = fn (%inner_arg_022: Tensor[(4, 1536), float32], %inner_arg_122: Tensor[(384, 1536), float32], %inner_arg_222: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][22]) /* ty=Tensor[(4, 384), float32] */
    };
    %44(%outer_arg_022, %outer_arg_122, %outer_arg_222) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_414: Tensor[(4, 384), float32] = %45(%var_412, %var_413, %v12_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_416: Tensor[(1, 4, 384), float32] = reshape(%var_414, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_417: Tensor[(1, 4, 384), float32] = multiply(%var_416, %v12_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_419: Tensor[(1, 4, 384), float32] = add(%var_417, %var_393) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_421: Tensor[(1, 4, 384), float32] = multiply(%var_419, %v13_0_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_423: Tensor[(1, 4, 384), float32] = add(%var_421, %v13_0_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_425: Tensor[(1, 4, 384), float32] = nn.conv1d(%var_423, %v13_0_fn_weight) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_427: Tensor[(1, 4, 384), float32] = nn.bias_add(%var_425, %v13_0_fn_bias) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_428: Tensor[(1, 4, 384), float32] = multiply(%var_427, %v13_0_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_430: Tensor[(1, 4, 384), float32] = add(%var_428, %var_419) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_432: Tensor[(1, 4, 384), float32] = multiply(%var_430, %v13_1_affine_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_433: Tensor[(1, 4, 384), float32] = add(%var_432, %v13_1_affine_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_435: Tensor[(384, 1536), float32] = transpose(%v13_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  let %var_437: Tensor[(4, 384), float32] = reshape(%var_433, newshape=[4, 384]) /* ty=Tensor[(4, 384), float32] */;
  let %var_438: Tensor[(1536, 384), float32] = transpose(%var_435, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  %47 = fn (%outer_arg_023: Tensor[(4, 384), float32], %outer_arg_123: Tensor[(1536, 384), float32], %outer_arg_223: Tensor[(1536), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_23") -> Tensor[(4, 1536), float32] {
    %46 = fn (%inner_arg_023: Tensor[(4, 384), float32], %inner_arg_123: Tensor[(1536, 384), float32], %inner_arg_223: Tensor[(1536), float32], Composite="ilaflex.linear") -> Tensor[(4, 1536), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][23]) /* ty=Tensor[(4, 1536), float32] */
    };
    %46(%outer_arg_023, %outer_arg_123, %outer_arg_223) /* ty=Tensor[(4, 1536), float32] */
  };
  let %var_439: Tensor[(4, 1536), float32] = %47(%var_437, %var_438, %v13_1_fn_0_bias) /* ty=Tensor[(4, 1536), float32] */;
  let %var_440: Tensor[(1, 4, 1536), float32] = reshape(%var_439, newshape=[1, 4, 1536]) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_441: Tensor[(1, 4, 1536), float32] = multiply(%var_440, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_442: Tensor[(1, 4, 1536), float32] = erf(%var_441) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_443: Tensor[(1, 4, 1536), float32] = multiply(%var_442, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_444: Tensor[(1, 4, 1536), float32] = add(0.5f /* ty=float32 */, %var_443) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_445: Tensor[(1, 4, 1536), float32] = multiply(%var_440, %var_444) /* ty=Tensor[(1, 4, 1536), float32] */;
  let %var_447: Tensor[(1536, 384), float32] = transpose(%v13_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(1536, 384), float32] */;
  let %var_449: Tensor[(4, 1536), float32] = reshape(%var_445, newshape=[4, 1536]) /* ty=Tensor[(4, 1536), float32] */;
  let %var_450: Tensor[(384, 1536), float32] = transpose(%var_447, axes=[1, 0]) /* ty=Tensor[(384, 1536), float32] */;
  %49 = fn (%outer_arg_024: Tensor[(4, 1536), float32], %outer_arg_124: Tensor[(384, 1536), float32], %outer_arg_224: Tensor[(384), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_24") -> Tensor[(4, 384), float32] {
    %48 = fn (%inner_arg_024: Tensor[(4, 1536), float32], %inner_arg_124: Tensor[(384, 1536), float32], %inner_arg_224: Tensor[(384), float32], Composite="ilaflex.linear") -> Tensor[(4, 384), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][24]) /* ty=Tensor[(4, 384), float32] */
    };
    %48(%outer_arg_024, %outer_arg_124, %outer_arg_224) /* ty=Tensor[(4, 384), float32] */
  };
  let %var_451: Tensor[(4, 384), float32] = %49(%var_449, %var_450, %v13_1_fn_2_bias) /* ty=Tensor[(4, 384), float32] */;
  let %var_453: Tensor[(1, 4, 384), float32] = reshape(%var_451, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_454: Tensor[(1, 4, 384), float32] = multiply(%var_453, %v13_1_scale) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_456: Tensor[(1, 4, 384), float32] = add(%var_454, %var_430) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_458: Tensor[(1, 4, 384), float32] = multiply(%var_456, %v14_g) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_459: Tensor[(1, 4, 384), float32] = add(%var_458, %v14_b) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_460: Tensor[(1, 4, 384), float32] = reshape(%var_459, newshape=[1, 4, 384]) /* ty=Tensor[(1, 4, 384), float32] */;
  let %var_461: Tensor[(1, 384), float32] = mean(%var_460, axis=[1]) /* ty=Tensor[(1, 384), float32] */;
  let %var_462: Tensor[(1, 384), float32] = transpose(%var_461, axes=[0, 1]) /* ty=Tensor[(1, 384), float32] */;
  let %var_464: Tensor[(384, 10), float32] = transpose(%v16_weight, axes=[1, 0]) /* ty=Tensor[(384, 10), float32] */;
  let %var_465: Tensor[(1, 384), float32] = reshape(%var_462, newshape=[1, 384]) /* ty=Tensor[(1, 384), float32] */;
  let %var_466: Tensor[(10, 384), float32] = transpose(%var_464, axes=[1, 0]) /* ty=Tensor[(10, 384), float32] */;
  let %var_468: Tensor[(1, 10), float32] = nn.dense(%var_465, %var_466, units=None) /* ty=Tensor[(1, 10), float32] */;
  add(%var_468, %v16_bias) /* ty=Tensor[(1, 10), float32] */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.AcceleratorCallAttrs"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [
        3, 
        7, 
        11, 
        15, 
        19, 
        23, 
        27, 
        31, 
        35, 
        39, 
        43, 
        47, 
        51, 
        55, 
        59, 
        63, 
        67, 
        71, 
        75, 
        79, 
        83, 
        87, 
        91, 
        95, 
        99
      ]
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "4"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [5, 6]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "8"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [9, 10]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "12"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [13, 14]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "16"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [17, 18]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "20"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [21, 22]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "24"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [25, 26]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "28"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [29, 30]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "32"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [33, 34]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "36"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [37, 38]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "40"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [41, 42]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "44"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [45, 46]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "48"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [49, 50]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "52"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [53, 54]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "56"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [57, 58]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "60"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [61, 62]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "64"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [65, 66]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "68"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [69, 70]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "72"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [73, 74]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "76"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [77, 78]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "80"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [81, 82]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "84"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [85, 86]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "88"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [89, 90]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "92"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [93, 94]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "96"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [97, 98]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1536"
      }
    }, 
    {
      "type_key": "relay.attrs.AcceleratorCallAttrs", 
      "attrs": {
        "func_name": "flex-linear", 
        "output_shape": "100"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [101, 102]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "384"
      }
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.8.dev0"}
}